kubectl port-forward svc/argocd-server -n argocd 8011:443


# mandatory:

docker desktop + helm

#mandatoy
ingress nginx
metricserver

#optional
ddog agent


### Descriptions
write script for all of this
app own namespace


"url": "http://prometheus-service.monitoring.svc:8080",





## Notes
git update-index --chmod=+x gradlew

kubectl port-forward svc/argocd-server -n argocd 8011:443
```
            "fix", 
            "feat"
            "build",
            "chore",
            "ci",
            "docs",
            "perf",
            "refactor",
            "revert",
            "style",
            "test",
```

q1vX27jjQAHKISHs

##########################ingress
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.3.1/deploy/static/provider/cloud/deploy.yaml


################metric server

helm repo add metrics-server https://kubernetes-sigs.github.io/metrics-server/
helm upgrade --install metrics-server --set args={--kubelet-insecure-tls} -n kube-system metrics-server/metrics-server


########DDOg client install

helm install datadog-agent -f values.yaml --set datadog.site=datadoghq.eu --set datadog.apiKey=03e4eea3cce22243935b6dc7f85d8c5e datadog/datadog

ddog key: afe6192b2860b00dc5cf5a2ab5eb53795c9177e9

############################################################

============OPTIONAL
######################Argocd
kubectl create namespace argocd
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

pw: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo

conf: repo: git@github.com:zlaval-elte-thesis/deployment.git
then crate project
#######################################################


Installing on Kubernetes
Run the Datadog Agent in your Kubernetes cluster directly in order to start collecting your cluster and applications metrics, traces, and logs. You can deploy it with a Helm chart (instructions below), the Datadog Operator or directly with a DaemonSet.

For more information about installing the Datadog Agent on different distributions, see the Kubernetes distributions documentation.

1Installing the Datadog Agent

To install the chart with a custom release name RELEASE_NAME (e.g. datadog-agent):

Install Helm.
Add the Datadog Helm repository: helm repo add datadog https://helm.datadoghq.com
Fetch the latest version of newly added charts: helm repo update.
Create an empty values.yaml file, and override any of the default values if desired. Some examples can be found here.
Deploy the Datadog Agent:
With Helm v3+:

helm install RELEASE_NAME -f datadog-values.yaml --set datadog.site='datadoghq.eu' --set datadog.apiKey='03e4eea3cce22243935b6dc7f85d8c5e' datadog/datadog 
With Helm v1/v2:

helm install -f datadog-values.yaml --name RELEASE_NAME --set datadog.site='datadoghq.eu' --set datadog.apiKey='03e4eea3cce22243935b6dc7f85d8c5e' datadog/datadog
This chart adds the Datadog Agent to all nodes in your cluster via a DaemonSet. Soon after installation, Datadog begins to report hosts and metrics data in your account.

2Enabling log collection

To enable log collection with Helm, update your datadog-values.yaml file with the following log collection configuration


datadog:
  logs:
    enabled: true
    containerCollectAll: true
              
Then upgrade your Datadog Helm chart:

helm upgrade -f datadog-values.yaml RELEASE_NAME datadog/datadog
3Enabling trace collection

Follow the dedicated APM setup documentation to learn how to collect your application traces in a Kubernetes environment.

4Further Reading

Please refer to the Agent Kubernetes documentation to discover all available Agent features.


-------------------------------
Notes

[![Build & Test](https://github.com/flawless-so/api-gateway/actions/workflows/build.yml/badge.svg)](https://github.com/flawless-so/api-gateway/actions/workflows/build.yml)
[![GitHub version](https://img.shields.io/github/v/tag/zlaval-elte-thesis/api-gateway.svg?sort=semver&color=green)](https://github.com/zlaval-elte-thesis/api-gateway)


# optional:
argocd


